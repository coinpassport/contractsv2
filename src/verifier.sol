// SPDX-License-Identifier: GPL-3.0
/*
    Copyright 2021 0KIMS association.

    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).

    snarkJS is a free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    snarkJS is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
    License for more details.

    You should have received a copy of the GNU General Public License
    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
*/

pragma solidity >=0.7.0 <0.9.0;

contract Groth16Verifier {
    // Scalar field size
    uint256 constant r    = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
    // Base field size
    uint256 constant q   = 21888242871839275222246405745257275088696311157297823662689037894645226208583;

    // Verification Key data
    uint256 constant alphax  = 20491192805390485299153009773594534940189261866228447918068658471970481763042;
    uint256 constant alphay  = 9383485363053290200918347156157836566562967994039712273449902621266178545958;
    uint256 constant betax1  = 4252822878758300859123897981450591353533073413197771768651442665752259397132;
    uint256 constant betax2  = 6375614351688725206403948262868962793625744043794305715222011528459656738731;
    uint256 constant betay1  = 21847035105528745403288232691147584728191162732299865338377159692350059136679;
    uint256 constant betay2  = 10505242626370262277552901082094356697409835680220590971873171140371331206856;
    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;
    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;
    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;
    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;
    uint256 constant deltax1 = 1508242839023852823266561579972838725004495547786208159071233808703048359139;
    uint256 constant deltax2 = 13313675930335017424367201483004392045846048320495099060781621656842026816670;
    uint256 constant deltay1 = 12376357959144067642336903140739209834828426739098833735118858926584810361878;
    uint256 constant deltay2 = 10671164108826177915937467441937082527077092592522402440858864141170585803300;

    
    uint256 constant IC0x = 14654381276709560540780092375837174417833117070269317503967448923102130989465;
    uint256 constant IC0y = 5854668785747149526628252221840661260085671865050561887301779144762495217587;
    
    uint256 constant IC1x = 890694477196990126563954863853365706381879870228157411624125002367462823674;
    uint256 constant IC1y = 5328786111450268104613302085062198473029624995635139127251345037433044011494;
    
    uint256 constant IC2x = 12620361537038697069993387639967154006086247681785828735853834354099141732036;
    uint256 constant IC2y = 9880270057140906299714869143920959232738702256449343501181090481229501482273;
    
    uint256 constant IC3x = 190337547756534789390024295850091560359579762507593444606092840556772732306;
    uint256 constant IC3y = 1525327698291609109886024637258147244556895210821741645368694591433204125266;
    
    uint256 constant IC4x = 12943220855971209857927680185944122645845377774003514814781610649281570277801;
    uint256 constant IC4y = 8148020093312409954241740551139741930745801243537540463407169067233262106859;
    
    uint256 constant IC5x = 17526454267804899552506340533980969307848079509068587857958471422577149354580;
    uint256 constant IC5y = 2172627155350426104646353338189236048662552225798091284693611309415401488610;
    
    uint256 constant IC6x = 1268164422788795319331008339175691065804868963749871635095629277100784806890;
    uint256 constant IC6y = 19029672010755704934317435386995395802954907810764325825983965930919009801819;
    
    uint256 constant IC7x = 9494936560595385606362946134544222595629132771695109059676619567551606409565;
    uint256 constant IC7y = 760753367796437333508900593961541434831022604381580986976497012892393959238;
    
    uint256 constant IC8x = 9694263972968462602796305833444502483805395922591293204993618757641313996643;
    uint256 constant IC8y = 14742380637342723653701412206227907627445508591039369320119903652065034369012;
    
    uint256 constant IC9x = 18899009099665722399665782892543097671527553006536098586221667843942422262358;
    uint256 constant IC9y = 10578774801726058896209437192261158549973202749443981707496885464995041432046;
    
    uint256 constant IC10x = 12802089234915415256829227799620026806422688129497647452840005327588988698384;
    uint256 constant IC10y = 22040410114124831760025757071631531007562443815217593402602481989592648422;
    
    uint256 constant IC11x = 12014730643272614475718637789362867893173479568271561509431141126451178056485;
    uint256 constant IC11y = 9938124527506726607178683257794628271472171774079235399751950202972653004704;
    
    uint256 constant IC12x = 2211687644104352176769401274534223884353112038789416636823890806959738821484;
    uint256 constant IC12y = 4992525341660786787674038318284567496540335782432517218180082295100196892189;
    
    uint256 constant IC13x = 2155056921445907278983819628144425832406590654897685344269057612520426576373;
    uint256 constant IC13y = 4685805461397658307595488462110491519917268370234499192714285934778069491257;
    
    uint256 constant IC14x = 21689836591346819905046146218984646403392603366546893225686497342322895646108;
    uint256 constant IC14y = 3169511884651383854269056963460395085313354365185997097627430848948445147406;
    
    uint256 constant IC15x = 9969168929516005857895178573619283692441842310041626527900599792254055315415;
    uint256 constant IC15y = 11831557019552940686484039835471203565280309731475776472731711499059479187184;
    
    uint256 constant IC16x = 18808806706108424470664751363321488253139634353503758254776660429737945926902;
    uint256 constant IC16y = 19821272449698228152218894949151048025097957265159302223247461852205575102145;
    
    uint256 constant IC17x = 644112464465592704729847522818061006293207771123694789543239669431495706367;
    uint256 constant IC17y = 11812508219083882378614050094532299670691849118466076507119007896345003113759;
    
    uint256 constant IC18x = 1527527348904961146990249676306303365101322522018964594956518168874839549211;
    uint256 constant IC18y = 3623183954161073608269200981732367083510046853508471239920801810652322606694;
    
    uint256 constant IC19x = 8959875768080147246160263074562487424767917016719287334179561076030852325480;
    uint256 constant IC19y = 19410740733293697204670121153976219836792962844148138822916505895062936446660;
    
    uint256 constant IC20x = 3746440030365410862835653631086501332843761834041071454760596043504068804577;
    uint256 constant IC20y = 20071862692163560005625531384097313575532474037488146793503004765388708313784;
    
    uint256 constant IC21x = 15684334174313507933364197421006289967180694916540157940265605481521188330819;
    uint256 constant IC21y = 333747873834989584279315724254010014513229362315958235629925750598251290739;
    
    uint256 constant IC22x = 10378820432636873079140796336449709932506960804920193595921739509061466561649;
    uint256 constant IC22y = 21745061617945770787449121760066955567976489155907721154744563821072017845187;
    
    uint256 constant IC23x = 14534689538076556282624149866956845209181916463173487674677645213939468062765;
    uint256 constant IC23y = 11054443334191617787014992767696399115133568322875525311794290902805939782872;
    
    uint256 constant IC24x = 15143691638955602520225096672638003151767909744953824534471969345380842601025;
    uint256 constant IC24y = 6608206251981763054406868497500952983621242571232439914489309359374711898941;
    
    uint256 constant IC25x = 9970546911336849164380011523720367485494788658035203911326226921699885408408;
    uint256 constant IC25y = 8780305743585999186340459264924719905284708935829131531358010538482928538200;
    
    uint256 constant IC26x = 5568079251456174002000347181157480143414551640976122282424358354507417166813;
    uint256 constant IC26y = 2679249297005283164891173787977564657533101152361069344270682956861391493647;
    
    uint256 constant IC27x = 19831277180128597838319642035213723143713830893892704258590501633106850335307;
    uint256 constant IC27y = 11934099604151556196269930358046711717952744257272391270457471488021186427176;
    
    uint256 constant IC28x = 4146648726582912452318207625965916112055453680036860694008711644515191149721;
    uint256 constant IC28y = 13769853939163878211938240051673559189348476934766354575951672634886265924714;
    
    uint256 constant IC29x = 2981656132442901946266299278688206077942278939344529543461507754848429246427;
    uint256 constant IC29y = 13738631073465345930580361320870099881209938707302630089967348970326109158261;
    
    uint256 constant IC30x = 2059064055251601367096288795142338717454802435447847922766503861010936399614;
    uint256 constant IC30y = 1698918609301660330622960010297622167906332274585152596884816988136277354544;
    
    uint256 constant IC31x = 18644793877986442690257604088869779305506079425489729629179542055976333252456;
    uint256 constant IC31y = 15365928670774994205083818460572301054947643298487512825938082240095835534106;
    
    uint256 constant IC32x = 1438382345325700866857990285020099698094646274359480696081550423699176491730;
    uint256 constant IC32y = 15087516003944015767775563449793961649639707418405387075664495220043943936616;
    
    uint256 constant IC33x = 21478720669661653555368982826158993297078270951703428002873503892959601273699;
    uint256 constant IC33y = 12905473798067971664732380639236020822467211054697719872365922266246805951141;
    
    uint256 constant IC34x = 4248529172387880510042150987460775920779118240804178910241998793154166500886;
    uint256 constant IC34y = 7131195535215937009948240001397742266860100852851052406834171415759064443656;
    
    uint256 constant IC35x = 7845225443922839282875817477793718340839698079261976233701642573297252651707;
    uint256 constant IC35y = 11218022489765605598792228524199696762239580914900646464929483724412655457498;
    
    uint256 constant IC36x = 16459269528993580334435697865558664337574111611677331253805037201837795292752;
    uint256 constant IC36y = 15443481448179636788456322601079902435207757505211841783926097276476673192130;
    
    uint256 constant IC37x = 19065451161787543295593503495606487194759904947361840213511896658993290528740;
    uint256 constant IC37y = 19509456930941616905055096936013519276307906628514441230968603486685376340299;
    
    uint256 constant IC38x = 10024350263741685262777918248518046090687500700568880892034499865070185937714;
    uint256 constant IC38y = 19289298815569840537318765247235473426301297282295202265718580841146930221706;
    
    uint256 constant IC39x = 1149620894169274521454995825131013357575180684350089668396341524983644369918;
    uint256 constant IC39y = 1956772896037927527971988087616829150121591117912534582019115761623618395067;
    
    uint256 constant IC40x = 7169683074877275467091557406405578850852804631059626924992730511940109070741;
    uint256 constant IC40y = 5962727240491256312351483837863433686981954406799837063258387468901602507770;
    
    uint256 constant IC41x = 10276689451186754585855388527108232067173890451510637046943286479268006482801;
    uint256 constant IC41y = 13568242944078896130970370846344664370028801480918869994666345757235849503449;
    
    uint256 constant IC42x = 5680414042596617845459039001174174279248101453875753943506592505784998569945;
    uint256 constant IC42y = 3066379173351014896032774788455165105336253955275941596044629486903294401566;
    
    uint256 constant IC43x = 15853600768645309463595042676118328988006341428829270735206501256961843590173;
    uint256 constant IC43y = 17861509956990339613917385921040928159708222727487259803374285996480172275413;
    
    uint256 constant IC44x = 5421396098453247456010199113077541576265539073113148250454187304301274286804;
    uint256 constant IC44y = 20287818348796272685735555424456899505450575912835173353385657828372713224208;
    
    uint256 constant IC45x = 1810904674626417388289000188802964534398844178494081056136731510825289801534;
    uint256 constant IC45y = 3171220356077205177346247980632630044894931698650198385304938813903410714254;
    
    uint256 constant IC46x = 9984274939134759882402003830367443508846864418244383594318726120263302448440;
    uint256 constant IC46y = 17417701335096960125925838118035198959584073581347457516530416017546954159353;
    
    uint256 constant IC47x = 20474184815570040667335220371220136554593265052924660763458254895075258669183;
    uint256 constant IC47y = 17637671892523027674835446562626685866157809192504011027979577405522497477722;
    
    uint256 constant IC48x = 9096885944173287125141971527539817072327003698605162074380467965556278386639;
    uint256 constant IC48y = 18137567980910848332437974641426867359012225090730434339489698501255387711779;
    
    uint256 constant IC49x = 21775918922673160480409739610687540051988165319415171944340450514133116947129;
    uint256 constant IC49y = 14661330834088352706503422187533305387589129649870782696223989071687129895034;
    
    uint256 constant IC50x = 12435327644193794100302326025926671336636419569806380362181027418966909129829;
    uint256 constant IC50y = 1748859162118227199930626085600293647378069864004010181871955515210992409468;
    
    uint256 constant IC51x = 8207287038029156742296918340045526631090617746115248825042685607250819685491;
    uint256 constant IC51y = 15068648411299767737956683488866446533836170572288543620557436241522161864872;
    
    uint256 constant IC52x = 2037895220145314738552712229262567374104091241428183141360219806216969508447;
    uint256 constant IC52y = 12209212175645550125733714263427248451896898068640395044392253776877860285667;
    
    uint256 constant IC53x = 18503458789914695278376204371944312615957298077483810948426968645662672027587;
    uint256 constant IC53y = 9161938479676263713402596291095262478556933986702178564752721497403587442315;
    
    uint256 constant IC54x = 7750216439695304957754389291230383137304225344031584021713183432029351609486;
    uint256 constant IC54y = 14888430742223680771906493125292789171830848027065680138704191536268792937957;
    
    uint256 constant IC55x = 4546623353529650439279788749722309656482762884359778906050348603192903062385;
    uint256 constant IC55y = 19691432872377349765364707544230857083172818824586460565824473581250895578386;
    
    uint256 constant IC56x = 16587415105391021790833292137301574276414202449397550245970855156478658783797;
    uint256 constant IC56y = 10101014026736205401160782427354053209205181988107445812064254888817424565745;
    
    uint256 constant IC57x = 21458414773453104834883136330650611980067503477679093372361051395133535423912;
    uint256 constant IC57y = 2278936146629959505844968216903661832327087369050336438916690397783743160275;
    
    uint256 constant IC58x = 17733737010588256205453990902730195663041434747163450327604914025612353044442;
    uint256 constant IC58y = 12215858977502727533143186504237007826934254768849590773833821196702581714285;
    
    uint256 constant IC59x = 15411323563156930543713020524979372128853823755144292142479399124417890826470;
    uint256 constant IC59y = 7001244240887871503141437035676257135236315368190884821803790359120224902500;
    
    uint256 constant IC60x = 10759847354591474348401717680626004448588952594470123312705296303746747697294;
    uint256 constant IC60y = 4470624201369391049416414272162988108326172474135896503272723052099070206300;
    
    uint256 constant IC61x = 7945102305577816857505721042758610710144691005778065951086774806315939757132;
    uint256 constant IC61y = 10979804973122894526021073983022748632859089660729076418738311703582209218097;
    
    uint256 constant IC62x = 21112547183966502510245028018300812391595153250540759522274055446626953967851;
    uint256 constant IC62y = 129842185123312715728988351110649978898719768742861964150136423664945999317;
    
    uint256 constant IC63x = 11897899003259106458875275198315216129966139074931711238345856877453836050177;
    uint256 constant IC63y = 3083224287867334347224291740125072197356340313879459234106882000911617420385;
    
    uint256 constant IC64x = 14665996609199670250035474220710893036730721130473592464099035308831944460599;
    uint256 constant IC64y = 6603752887124478605502321140189269165353667465211852899272492378214430555727;
    
    uint256 constant IC65x = 19065430639451676572838134231246761741608179899232054812971519752115345066951;
    uint256 constant IC65y = 1654852756282267852510693077686131310168053224200669698757323910285756884964;
    
    uint256 constant IC66x = 12636900508489749409789334315510762121623227094706901428008458786610442391603;
    uint256 constant IC66y = 4635236161055525468152060853990254694876637907124595377774571907511417879147;
    
    uint256 constant IC67x = 7824518987487266273788963303615278710665107175085582699518010345856991413401;
    uint256 constant IC67y = 19933549589325238011155142260132971234420931058733845533770880934457339611465;
    
    uint256 constant IC68x = 19191500226271787692210228843057348003623077757812560368245176612784502698335;
    uint256 constant IC68y = 7275189068988761902257345108614158178283908149863122678122666858973503942163;
    
    uint256 constant IC69x = 12936984059142893859436525337683835612109142121331796670897841879245271906356;
    uint256 constant IC69y = 17344547275378918436670074491624975514045768580275591201048842011150027342769;
    
    uint256 constant IC70x = 1186978598893519482915832933555190955356307188084914952409527069929156774958;
    uint256 constant IC70y = 21256819776540082604738252638378959222555511711808235500191949901098727983321;
    
    uint256 constant IC71x = 3521632706482165706283893560441422116971773933675111895593591881767139984517;
    uint256 constant IC71y = 15358948816091476399555128992876166789648242945348024925801462890240601705300;
    
    uint256 constant IC72x = 9256763327088094748134955136850851483574820945085702886761119247900081450000;
    uint256 constant IC72y = 19931235489180487055874078059767132348567887002691208377504015056774186578428;
    
    uint256 constant IC73x = 1309233655750990459978467953537792464222760894111354699161713918290262000411;
    uint256 constant IC73y = 18183786949830910034716114808362683161105387205148381688894007970188157642950;
    
    uint256 constant IC74x = 7791928862444451093232541384055945483633619078965211282969199044254533640785;
    uint256 constant IC74y = 11615367795223723553265909595343599816532562474043301542140518457953969455291;
    
    uint256 constant IC75x = 17605685477663552406796191763926072945650623048854678709848814627893033469368;
    uint256 constant IC75y = 11414651904396402266706738038458740529904042043229960613345972889631016813931;
    
    uint256 constant IC76x = 9169202606793637898840441136977762993429199511673659648261886917020075811919;
    uint256 constant IC76y = 2428244632285445649199108371665747947451913029876636282506007600373664166571;
    
    uint256 constant IC77x = 14978395631573663564435121166899448999464389157924767209036953320838158298497;
    uint256 constant IC77y = 2881052712616606629582695826255948283795239095970270410427993406395950312227;
    
    uint256 constant IC78x = 12626400035135175309724739345688807478221322361133428180372499348206740628902;
    uint256 constant IC78y = 10075237639724506863106881807020150812096890328479637935227965833253925383885;
    
    uint256 constant IC79x = 16887307060277935049961935252569215324533589268481125365508726708082307089169;
    uint256 constant IC79y = 3495565509021806623916560030446701472784030978130957755213412875681078670246;
    
    uint256 constant IC80x = 2729171368386909469967132457307796830589423456379152647639880038438847576851;
    uint256 constant IC80y = 8799464426965987551694401818610066178269977440926104110796716991381341716161;
    
    uint256 constant IC81x = 15543453209050076913940697730442844519663985753602281490701907265807911224351;
    uint256 constant IC81y = 7207461021542982296784939903737948908004724025966302368715871122776401928657;
    
    uint256 constant IC82x = 15271701484701391417486238500690588501007019558288973741982066339484655312600;
    uint256 constant IC82y = 16241484664715747908739364312651901282689060112881641573336848751015421473886;
    
    uint256 constant IC83x = 18074658568832527697375510885499778077127269390046430173059545084708590366906;
    uint256 constant IC83y = 4878519167289618955182310523858208717532273330975469980052672626818110063543;
    
    uint256 constant IC84x = 14967225435288077212221786787196024056486804252312174291363835896059561101046;
    uint256 constant IC84y = 6312693852535115211654190661970001991042232799570622701145840708968683093250;
    
    uint256 constant IC85x = 5529233412001962495337154020264912682005868003004085389572190193793931387260;
    uint256 constant IC85y = 57681891095636158785415723098261781246506981691179612477232329565804303502;
    
    uint256 constant IC86x = 1044480661258750048319204432515330168351675484731799609023086373805563862672;
    uint256 constant IC86y = 16911464158145215507621518885833884598432996562928012465866971654137326841240;
    
    uint256 constant IC87x = 7384984977975959531952963183532526146429870617934491686558239280604121063777;
    uint256 constant IC87y = 8478176193785873701508925037707570795200803399214635073115157130577745119708;
    
    uint256 constant IC88x = 18473282041802656517088595334426293159241752465304917066650354550208790702811;
    uint256 constant IC88y = 7430018449681304125621773318705072054356084647719291873790637100480437211095;
    
    uint256 constant IC89x = 18392527808268230588331655670102406015811880831389665855985578400356667308994;
    uint256 constant IC89y = 20291339530578799793292103731174051737155490231444037739943049409927707390469;
    
    uint256 constant IC90x = 16898359726871463396072059449092528586331180355576074973767038441048006369941;
    uint256 constant IC90y = 6111912475504401649830895387518087149210134135534986617918919346092135961472;
    
    uint256 constant IC91x = 5646071428122067867495913484821595049631123578406677290155661748446532342736;
    uint256 constant IC91y = 1592904034469534642917138342676879257703673643177970804834018151738056217407;
    
    uint256 constant IC92x = 19321689032570440836754458663290358839122337185898997493676009202005107824980;
    uint256 constant IC92y = 9503532426273197262792349592885882998810043749155642605767942334275214254784;
    
    uint256 constant IC93x = 5143946460662572619555045222731314421962737287892169125951245231720219648583;
    uint256 constant IC93y = 21532484255958178312684259338589363565024440776382431697763458239653265706803;
    
    uint256 constant IC94x = 21708125426069975822588404221710666930553553418086420005231271171497441542219;
    uint256 constant IC94y = 15413033244835733942550483569130215525066819784417300371325886911642777602156;
    
    uint256 constant IC95x = 5277045582792837028974947300582521714069473522832256959984832927623442837134;
    uint256 constant IC95y = 20340558443086755139252734228081225361320603209469445176969114561744735908063;
    
    uint256 constant IC96x = 21119957856401470191304141702351452880797456194346283501412248726017546515533;
    uint256 constant IC96y = 5424735252996522547771023147161831871333495826738172008394805510135081042420;
    
    uint256 constant IC97x = 19556551567170978602068881658881960979318003670857248818226904116352500866283;
    uint256 constant IC97y = 4123956629712601809524494397727766226205143289783017971275945519528215976909;
    
    uint256 constant IC98x = 12212927325382185130949560926769260260262145161665051647588626130651556797802;
    uint256 constant IC98y = 20492922451667491834001231224528569846080485854676018775958722711056798660897;
    
    uint256 constant IC99x = 6633362703570440781589011989968350000621482421783433750673572063193491320061;
    uint256 constant IC99y = 13979253836434615051691121411648025645842423874081243321073932622435181058286;
    
    uint256 constant IC100x = 11956849173915112582564464230424104337713138224461567385753065364953290028925;
    uint256 constant IC100y = 3409888347488273154429536388601008830890467383734555907763998491049216269079;
    
    uint256 constant IC101x = 18354921371381817153673782051528794034933009565035088540434437016748062873982;
    uint256 constant IC101y = 15781764007235142185378031234868683560572121554447687744927604827889634272345;
    
    uint256 constant IC102x = 8198781300471802448322587525135269942982381021025744347299081441896875993895;
    uint256 constant IC102y = 19109913918474840844210735412494374225242439597724840605626063598552699899095;
    
    uint256 constant IC103x = 12026087700126282013470107527451519416053721381636856333295209737062994965447;
    uint256 constant IC103y = 18633698065904917826671603639462352850044591145190119388588549079743700271928;
    
    uint256 constant IC104x = 17955790633773722555442848427831381343529610548689109864501352625333356736935;
    uint256 constant IC104y = 6274965979973174232745350102841637273291212292914526006681126187193243136506;
    
    uint256 constant IC105x = 18788759773667407364512961787082335475337077155539958720081406008891152306889;
    uint256 constant IC105y = 5930286347253545065613986562532607519682289801193362527753920723000105113929;
    
    uint256 constant IC106x = 1845105881438814566117150286688682445615859642791667922441191695099047054140;
    uint256 constant IC106y = 3212526141242013553755171498081316505238224233628091805818947312289998983274;
    
    uint256 constant IC107x = 21456135639532737878799224398479127664771388740861950033492984243277192406648;
    uint256 constant IC107y = 5659752919197752917616226718695254707930593436213113033774369286285737523640;
    
    uint256 constant IC108x = 6723908047831761138529967120963412948317594715953195687006977375355246902245;
    uint256 constant IC108y = 14736870690423293228997071196717791016156433037985481256561184120069300866140;
    
    uint256 constant IC109x = 21235215744877116310863076339655237874909619324985237893593845844523686062266;
    uint256 constant IC109y = 243752556222509697828696172706373939963005267472053634876534951973644294925;
    
    uint256 constant IC110x = 19125964545156557663990905115174190197522390053888077702113359008040164200596;
    uint256 constant IC110y = 5645216936516869646912181804752076367179616880401698917888955511044707704148;
    
    uint256 constant IC111x = 1859066002814624631298659923700096876009838128934541445716625591086352224964;
    uint256 constant IC111y = 8333203164832939804888424832267760747037907614935457219583036054453147435450;
    
    uint256 constant IC112x = 10792102744937780544473925183571296335250074268469847850423715308720482487464;
    uint256 constant IC112y = 12272698293230380771907781530821839031124601063159953582021817112674948669999;
    
    uint256 constant IC113x = 20897761976750121117600121590623125499725089955019788433322543614044998801952;
    uint256 constant IC113y = 12226716082339997794706823513185243035216510889408579906647823886086856363938;
    
    uint256 constant IC114x = 17737965048517757975381582027187675206983383368668967036921319912758772692572;
    uint256 constant IC114y = 5240580780068563268721073694988092323257496653439173980178167005969567649680;
    
    uint256 constant IC115x = 15588739596462691309157265531064190724578130274891292933719286423147911411102;
    uint256 constant IC115y = 9495765925005810216381161318019558656129486350414108398238495590521028011818;
    
    uint256 constant IC116x = 17606035570730310426195557619319899002205504741667334001745752689311212716437;
    uint256 constant IC116y = 4746606544000565036434205563570737435537172487742513978653327817102586696027;
    
    uint256 constant IC117x = 1981586530414725453784990900906338985000597910423858189440369009996638384060;
    uint256 constant IC117y = 3901906354072282788403481609433239080416330803485208703668752880499327457954;
    
    uint256 constant IC118x = 9945612321211730597714514825819502929903575752773125910079053735982036924466;
    uint256 constant IC118y = 13803632873448460959851614255523174906213806966716009449875314896746311018806;
    
    uint256 constant IC119x = 17955643034884027846445141580179053859620933683263155696390751832530222601724;
    uint256 constant IC119y = 16696139690254255813566673631945186273363566053683870584593011784775533702982;
    
    uint256 constant IC120x = 6358241254732477097975479978350542730472857313958498423015656259872697112216;
    uint256 constant IC120y = 12149122072705128098307927440508727600510746080689128715931079622106478548126;
    
    uint256 constant IC121x = 20151583157115526884286085672442791228582097789709250081009183540673753680673;
    uint256 constant IC121y = 21056670728798606888416174259163961446153084767437411984123997744448403521935;
    
    uint256 constant IC122x = 16377253171029113486252267380501443225662267672092630284845590316602319842031;
    uint256 constant IC122y = 11166465675459406817815150987418740798077149778184366069591945044082539839704;
    
    uint256 constant IC123x = 13848169944859459461971335390041556433430475942966099500219174197685207196627;
    uint256 constant IC123y = 2685166397576596897890071547623919980210928310170343698783358018398586405306;
    
    uint256 constant IC124x = 1980968198261516915858059964995386804279541126256841455327946589247265697645;
    uint256 constant IC124y = 14538582548403637456624650959107562247702623329829862083475848208843484882783;
    
    uint256 constant IC125x = 18144296380982240276970992332412809371499408383600238983654729649277578175087;
    uint256 constant IC125y = 18476178261448919516322795230762908624409722130096840472486413119735638331503;
    
    uint256 constant IC126x = 14487225034472344745401700286063833314310695951484469279571601946153014036951;
    uint256 constant IC126y = 3762364817012549024339519582294510920009307500348277914222319437633866938367;
    
    uint256 constant IC127x = 18565425882984952527190618547191772697515245826219424914964689881691732738671;
    uint256 constant IC127y = 12189374033419692303287775631852595505085247933379899352294417962357619157690;
    
    uint256 constant IC128x = 9061883776364773354180375443854835095715420286133885003749822280965309622624;
    uint256 constant IC128y = 5991332922069468413454858448191125091904294822856101840052150857339755188432;
    
    uint256 constant IC129x = 11636180682415876340394027667858242443213284755691701527801186124355123393522;
    uint256 constant IC129y = 9525110810503675420094143236787451670069150207810773355261265772354155536550;
    
    uint256 constant IC130x = 7820263204416296287629491605447997958971137684570586391038847010575765912579;
    uint256 constant IC130y = 18453780028861993412281501946944075154799472778016471416861606918570081357712;
    
    uint256 constant IC131x = 9605071209000443835826293836834227403114919787487035826492349478014018484497;
    uint256 constant IC131y = 19254621740839735569096403315109932748197718241741505088584022251362128561774;
    
    uint256 constant IC132x = 9999827194155253186474980633057370181022854577171957763366961480959361258966;
    uint256 constant IC132y = 17260320393159226862243243687202307355304357570481516913714686090405355733350;
    
    uint256 constant IC133x = 10558949615631837779661928946835048128783770596786391010862309906989304263458;
    uint256 constant IC133y = 20484204297125931123347064617724546904467711405076805538199541006004425326598;
    
    uint256 constant IC134x = 18511238379598514756185629974787253576625346005985455560929895191365895569190;
    uint256 constant IC134y = 17846026217119745232466368489390363593117866972353198087123996814227594145000;
    
    uint256 constant IC135x = 15105711677401343059717040295036974432950923244050618492769663375896481672228;
    uint256 constant IC135y = 15838918341394099355720833586705931124775753910810096911912677045328571214442;
    
    uint256 constant IC136x = 15094750335734829271270867860936724115561336705521806364060864630845081386389;
    uint256 constant IC136y = 19344474482253120073674162185249832653851878953771316672827444163275200144314;
    
    uint256 constant IC137x = 7720770001790032046975211586881768453899098848931469646890620216289673967942;
    uint256 constant IC137y = 15998463068662359822696945524065562876686402272183580149711560721730696422172;
    
    uint256 constant IC138x = 3787105487793742583552563044102340485007295452692011771323888327613653505811;
    uint256 constant IC138y = 5699902437096712765313084574868277596688023912019824114102512116542841733546;
    
    uint256 constant IC139x = 3924414328187724250370150104191397071417683879650520525650182537901551490869;
    uint256 constant IC139y = 18669138849369125142581273816462740057266129191504860132360969248110282917969;
    
    uint256 constant IC140x = 6367500368523437251181219429335526517442122235086665347319984923319625559775;
    uint256 constant IC140y = 20046749467476336421845316407475060047477250459769686173105545326023600186795;
    
    uint256 constant IC141x = 1827278173799021777550741594115195646007147729393171847366522221006397664029;
    uint256 constant IC141y = 7893771223682375052728077473549459290291415853140943013184951513443235459487;
    
    uint256 constant IC142x = 6245698493177623481499031643306841984148532951925863471772616519791094565337;
    uint256 constant IC142y = 18355829132653140960356875319352909214860126954312646897973983307906991673803;
    
    uint256 constant IC143x = 2599443412130128487792181876462577143987309910382739884780804734963097441493;
    uint256 constant IC143y = 19389100304284489179072249402633156273930316518491946625669176082804007353149;
    
    uint256 constant IC144x = 1744478276304018378415725606937946353141511980563760172663695541863739743549;
    uint256 constant IC144y = 12341069730517541475885988884598713589896045902368592894015576921040406354781;
    
    uint256 constant IC145x = 6502604943067346240329265439217961353548340277165020804838962095412416513407;
    uint256 constant IC145y = 20061573327967755461641252377736947959101275077723257649283762008124360469464;
    
 
    // Memory data
    uint16 constant pVk = 0;
    uint16 constant pPairing = 128;

    uint16 constant pLastMem = 896;

    function verifyProof(uint[2] calldata _pA, uint[2][2] calldata _pB, uint[2] calldata _pC, uint[145] calldata _pubSignals) public view returns (bool) {
        assembly {
            function checkField(v) {
                if iszero(lt(v, q)) {
                    mstore(0, 0)
                    return(0, 0x20)
                }
            }
            
            // G1 function to multiply a G1 value(x,y) to value in an address
            function g1_mulAccC(pR, x, y, s) {
                let success
                let mIn := mload(0x40)
                mstore(mIn, x)
                mstore(add(mIn, 32), y)
                mstore(add(mIn, 64), s)

                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)

                if iszero(success) {
                    mstore(0, 0)
                    return(0, 0x20)
                }

                mstore(add(mIn, 64), mload(pR))
                mstore(add(mIn, 96), mload(add(pR, 32)))

                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)

                if iszero(success) {
                    mstore(0, 0)
                    return(0, 0x20)
                }
            }

            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {
                let _pPairing := add(pMem, pPairing)
                let _pVk := add(pMem, pVk)

                mstore(_pVk, IC0x)
                mstore(add(_pVk, 32), IC0y)

                // Compute the linear combination vk_x
                
                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))
                
                g1_mulAccC(_pVk, IC2x, IC2y, calldataload(add(pubSignals, 32)))
                
                g1_mulAccC(_pVk, IC3x, IC3y, calldataload(add(pubSignals, 64)))
                
                g1_mulAccC(_pVk, IC4x, IC4y, calldataload(add(pubSignals, 96)))
                
                g1_mulAccC(_pVk, IC5x, IC5y, calldataload(add(pubSignals, 128)))
                
                g1_mulAccC(_pVk, IC6x, IC6y, calldataload(add(pubSignals, 160)))
                
                g1_mulAccC(_pVk, IC7x, IC7y, calldataload(add(pubSignals, 192)))
                
                g1_mulAccC(_pVk, IC8x, IC8y, calldataload(add(pubSignals, 224)))
                
                g1_mulAccC(_pVk, IC9x, IC9y, calldataload(add(pubSignals, 256)))
                
                g1_mulAccC(_pVk, IC10x, IC10y, calldataload(add(pubSignals, 288)))
                
                g1_mulAccC(_pVk, IC11x, IC11y, calldataload(add(pubSignals, 320)))
                
                g1_mulAccC(_pVk, IC12x, IC12y, calldataload(add(pubSignals, 352)))
                
                g1_mulAccC(_pVk, IC13x, IC13y, calldataload(add(pubSignals, 384)))
                
                g1_mulAccC(_pVk, IC14x, IC14y, calldataload(add(pubSignals, 416)))
                
                g1_mulAccC(_pVk, IC15x, IC15y, calldataload(add(pubSignals, 448)))
                
                g1_mulAccC(_pVk, IC16x, IC16y, calldataload(add(pubSignals, 480)))
                
                g1_mulAccC(_pVk, IC17x, IC17y, calldataload(add(pubSignals, 512)))
                
                g1_mulAccC(_pVk, IC18x, IC18y, calldataload(add(pubSignals, 544)))
                
                g1_mulAccC(_pVk, IC19x, IC19y, calldataload(add(pubSignals, 576)))
                
                g1_mulAccC(_pVk, IC20x, IC20y, calldataload(add(pubSignals, 608)))
                
                g1_mulAccC(_pVk, IC21x, IC21y, calldataload(add(pubSignals, 640)))
                
                g1_mulAccC(_pVk, IC22x, IC22y, calldataload(add(pubSignals, 672)))
                
                g1_mulAccC(_pVk, IC23x, IC23y, calldataload(add(pubSignals, 704)))
                
                g1_mulAccC(_pVk, IC24x, IC24y, calldataload(add(pubSignals, 736)))
                
                g1_mulAccC(_pVk, IC25x, IC25y, calldataload(add(pubSignals, 768)))
                
                g1_mulAccC(_pVk, IC26x, IC26y, calldataload(add(pubSignals, 800)))
                
                g1_mulAccC(_pVk, IC27x, IC27y, calldataload(add(pubSignals, 832)))
                
                g1_mulAccC(_pVk, IC28x, IC28y, calldataload(add(pubSignals, 864)))
                
                g1_mulAccC(_pVk, IC29x, IC29y, calldataload(add(pubSignals, 896)))
                
                g1_mulAccC(_pVk, IC30x, IC30y, calldataload(add(pubSignals, 928)))
                
                g1_mulAccC(_pVk, IC31x, IC31y, calldataload(add(pubSignals, 960)))
                
                g1_mulAccC(_pVk, IC32x, IC32y, calldataload(add(pubSignals, 992)))
                
                g1_mulAccC(_pVk, IC33x, IC33y, calldataload(add(pubSignals, 1024)))
                
                g1_mulAccC(_pVk, IC34x, IC34y, calldataload(add(pubSignals, 1056)))
                
                g1_mulAccC(_pVk, IC35x, IC35y, calldataload(add(pubSignals, 1088)))
                
                g1_mulAccC(_pVk, IC36x, IC36y, calldataload(add(pubSignals, 1120)))
                
                g1_mulAccC(_pVk, IC37x, IC37y, calldataload(add(pubSignals, 1152)))
                
                g1_mulAccC(_pVk, IC38x, IC38y, calldataload(add(pubSignals, 1184)))
                
                g1_mulAccC(_pVk, IC39x, IC39y, calldataload(add(pubSignals, 1216)))
                
                g1_mulAccC(_pVk, IC40x, IC40y, calldataload(add(pubSignals, 1248)))
                
                g1_mulAccC(_pVk, IC41x, IC41y, calldataload(add(pubSignals, 1280)))
                
                g1_mulAccC(_pVk, IC42x, IC42y, calldataload(add(pubSignals, 1312)))
                
                g1_mulAccC(_pVk, IC43x, IC43y, calldataload(add(pubSignals, 1344)))
                
                g1_mulAccC(_pVk, IC44x, IC44y, calldataload(add(pubSignals, 1376)))
                
                g1_mulAccC(_pVk, IC45x, IC45y, calldataload(add(pubSignals, 1408)))
                
                g1_mulAccC(_pVk, IC46x, IC46y, calldataload(add(pubSignals, 1440)))
                
                g1_mulAccC(_pVk, IC47x, IC47y, calldataload(add(pubSignals, 1472)))
                
                g1_mulAccC(_pVk, IC48x, IC48y, calldataload(add(pubSignals, 1504)))
                
                g1_mulAccC(_pVk, IC49x, IC49y, calldataload(add(pubSignals, 1536)))
                
                g1_mulAccC(_pVk, IC50x, IC50y, calldataload(add(pubSignals, 1568)))
                
                g1_mulAccC(_pVk, IC51x, IC51y, calldataload(add(pubSignals, 1600)))
                
                g1_mulAccC(_pVk, IC52x, IC52y, calldataload(add(pubSignals, 1632)))
                
                g1_mulAccC(_pVk, IC53x, IC53y, calldataload(add(pubSignals, 1664)))
                
                g1_mulAccC(_pVk, IC54x, IC54y, calldataload(add(pubSignals, 1696)))
                
                g1_mulAccC(_pVk, IC55x, IC55y, calldataload(add(pubSignals, 1728)))
                
                g1_mulAccC(_pVk, IC56x, IC56y, calldataload(add(pubSignals, 1760)))
                
                g1_mulAccC(_pVk, IC57x, IC57y, calldataload(add(pubSignals, 1792)))
                
                g1_mulAccC(_pVk, IC58x, IC58y, calldataload(add(pubSignals, 1824)))
                
                g1_mulAccC(_pVk, IC59x, IC59y, calldataload(add(pubSignals, 1856)))
                
                g1_mulAccC(_pVk, IC60x, IC60y, calldataload(add(pubSignals, 1888)))
                
                g1_mulAccC(_pVk, IC61x, IC61y, calldataload(add(pubSignals, 1920)))
                
                g1_mulAccC(_pVk, IC62x, IC62y, calldataload(add(pubSignals, 1952)))
                
                g1_mulAccC(_pVk, IC63x, IC63y, calldataload(add(pubSignals, 1984)))
                
                g1_mulAccC(_pVk, IC64x, IC64y, calldataload(add(pubSignals, 2016)))
                
                g1_mulAccC(_pVk, IC65x, IC65y, calldataload(add(pubSignals, 2048)))
                
                g1_mulAccC(_pVk, IC66x, IC66y, calldataload(add(pubSignals, 2080)))
                
                g1_mulAccC(_pVk, IC67x, IC67y, calldataload(add(pubSignals, 2112)))
                
                g1_mulAccC(_pVk, IC68x, IC68y, calldataload(add(pubSignals, 2144)))
                
                g1_mulAccC(_pVk, IC69x, IC69y, calldataload(add(pubSignals, 2176)))
                
                g1_mulAccC(_pVk, IC70x, IC70y, calldataload(add(pubSignals, 2208)))
                
                g1_mulAccC(_pVk, IC71x, IC71y, calldataload(add(pubSignals, 2240)))
                
                g1_mulAccC(_pVk, IC72x, IC72y, calldataload(add(pubSignals, 2272)))
                
                g1_mulAccC(_pVk, IC73x, IC73y, calldataload(add(pubSignals, 2304)))
                
                g1_mulAccC(_pVk, IC74x, IC74y, calldataload(add(pubSignals, 2336)))
                
                g1_mulAccC(_pVk, IC75x, IC75y, calldataload(add(pubSignals, 2368)))
                
                g1_mulAccC(_pVk, IC76x, IC76y, calldataload(add(pubSignals, 2400)))
                
                g1_mulAccC(_pVk, IC77x, IC77y, calldataload(add(pubSignals, 2432)))
                
                g1_mulAccC(_pVk, IC78x, IC78y, calldataload(add(pubSignals, 2464)))
                
                g1_mulAccC(_pVk, IC79x, IC79y, calldataload(add(pubSignals, 2496)))
                
                g1_mulAccC(_pVk, IC80x, IC80y, calldataload(add(pubSignals, 2528)))
                
                g1_mulAccC(_pVk, IC81x, IC81y, calldataload(add(pubSignals, 2560)))
                
                g1_mulAccC(_pVk, IC82x, IC82y, calldataload(add(pubSignals, 2592)))
                
                g1_mulAccC(_pVk, IC83x, IC83y, calldataload(add(pubSignals, 2624)))
                
                g1_mulAccC(_pVk, IC84x, IC84y, calldataload(add(pubSignals, 2656)))
                
                g1_mulAccC(_pVk, IC85x, IC85y, calldataload(add(pubSignals, 2688)))
                
                g1_mulAccC(_pVk, IC86x, IC86y, calldataload(add(pubSignals, 2720)))
                
                g1_mulAccC(_pVk, IC87x, IC87y, calldataload(add(pubSignals, 2752)))
                
                g1_mulAccC(_pVk, IC88x, IC88y, calldataload(add(pubSignals, 2784)))
                
                g1_mulAccC(_pVk, IC89x, IC89y, calldataload(add(pubSignals, 2816)))
                
                g1_mulAccC(_pVk, IC90x, IC90y, calldataload(add(pubSignals, 2848)))
                
                g1_mulAccC(_pVk, IC91x, IC91y, calldataload(add(pubSignals, 2880)))
                
                g1_mulAccC(_pVk, IC92x, IC92y, calldataload(add(pubSignals, 2912)))
                
                g1_mulAccC(_pVk, IC93x, IC93y, calldataload(add(pubSignals, 2944)))
                
                g1_mulAccC(_pVk, IC94x, IC94y, calldataload(add(pubSignals, 2976)))
                
                g1_mulAccC(_pVk, IC95x, IC95y, calldataload(add(pubSignals, 3008)))
                
                g1_mulAccC(_pVk, IC96x, IC96y, calldataload(add(pubSignals, 3040)))
                
                g1_mulAccC(_pVk, IC97x, IC97y, calldataload(add(pubSignals, 3072)))
                
                g1_mulAccC(_pVk, IC98x, IC98y, calldataload(add(pubSignals, 3104)))
                
                g1_mulAccC(_pVk, IC99x, IC99y, calldataload(add(pubSignals, 3136)))
                
                g1_mulAccC(_pVk, IC100x, IC100y, calldataload(add(pubSignals, 3168)))
                
                g1_mulAccC(_pVk, IC101x, IC101y, calldataload(add(pubSignals, 3200)))
                
                g1_mulAccC(_pVk, IC102x, IC102y, calldataload(add(pubSignals, 3232)))
                
                g1_mulAccC(_pVk, IC103x, IC103y, calldataload(add(pubSignals, 3264)))
                
                g1_mulAccC(_pVk, IC104x, IC104y, calldataload(add(pubSignals, 3296)))
                
                g1_mulAccC(_pVk, IC105x, IC105y, calldataload(add(pubSignals, 3328)))
                
                g1_mulAccC(_pVk, IC106x, IC106y, calldataload(add(pubSignals, 3360)))
                
                g1_mulAccC(_pVk, IC107x, IC107y, calldataload(add(pubSignals, 3392)))
                
                g1_mulAccC(_pVk, IC108x, IC108y, calldataload(add(pubSignals, 3424)))
                
                g1_mulAccC(_pVk, IC109x, IC109y, calldataload(add(pubSignals, 3456)))
                
                g1_mulAccC(_pVk, IC110x, IC110y, calldataload(add(pubSignals, 3488)))
                
                g1_mulAccC(_pVk, IC111x, IC111y, calldataload(add(pubSignals, 3520)))
                
                g1_mulAccC(_pVk, IC112x, IC112y, calldataload(add(pubSignals, 3552)))
                
                g1_mulAccC(_pVk, IC113x, IC113y, calldataload(add(pubSignals, 3584)))
                
                g1_mulAccC(_pVk, IC114x, IC114y, calldataload(add(pubSignals, 3616)))
                
                g1_mulAccC(_pVk, IC115x, IC115y, calldataload(add(pubSignals, 3648)))
                
                g1_mulAccC(_pVk, IC116x, IC116y, calldataload(add(pubSignals, 3680)))
                
                g1_mulAccC(_pVk, IC117x, IC117y, calldataload(add(pubSignals, 3712)))
                
                g1_mulAccC(_pVk, IC118x, IC118y, calldataload(add(pubSignals, 3744)))
                
                g1_mulAccC(_pVk, IC119x, IC119y, calldataload(add(pubSignals, 3776)))
                
                g1_mulAccC(_pVk, IC120x, IC120y, calldataload(add(pubSignals, 3808)))
                
                g1_mulAccC(_pVk, IC121x, IC121y, calldataload(add(pubSignals, 3840)))
                
                g1_mulAccC(_pVk, IC122x, IC122y, calldataload(add(pubSignals, 3872)))
                
                g1_mulAccC(_pVk, IC123x, IC123y, calldataload(add(pubSignals, 3904)))
                
                g1_mulAccC(_pVk, IC124x, IC124y, calldataload(add(pubSignals, 3936)))
                
                g1_mulAccC(_pVk, IC125x, IC125y, calldataload(add(pubSignals, 3968)))
                
                g1_mulAccC(_pVk, IC126x, IC126y, calldataload(add(pubSignals, 4000)))
                
                g1_mulAccC(_pVk, IC127x, IC127y, calldataload(add(pubSignals, 4032)))
                
                g1_mulAccC(_pVk, IC128x, IC128y, calldataload(add(pubSignals, 4064)))
                
                g1_mulAccC(_pVk, IC129x, IC129y, calldataload(add(pubSignals, 4096)))
                
                g1_mulAccC(_pVk, IC130x, IC130y, calldataload(add(pubSignals, 4128)))
                
                g1_mulAccC(_pVk, IC131x, IC131y, calldataload(add(pubSignals, 4160)))
                
                g1_mulAccC(_pVk, IC132x, IC132y, calldataload(add(pubSignals, 4192)))
                
                g1_mulAccC(_pVk, IC133x, IC133y, calldataload(add(pubSignals, 4224)))
                
                g1_mulAccC(_pVk, IC134x, IC134y, calldataload(add(pubSignals, 4256)))
                
                g1_mulAccC(_pVk, IC135x, IC135y, calldataload(add(pubSignals, 4288)))
                
                g1_mulAccC(_pVk, IC136x, IC136y, calldataload(add(pubSignals, 4320)))
                
                g1_mulAccC(_pVk, IC137x, IC137y, calldataload(add(pubSignals, 4352)))
                
                g1_mulAccC(_pVk, IC138x, IC138y, calldataload(add(pubSignals, 4384)))
                
                g1_mulAccC(_pVk, IC139x, IC139y, calldataload(add(pubSignals, 4416)))
                
                g1_mulAccC(_pVk, IC140x, IC140y, calldataload(add(pubSignals, 4448)))
                
                g1_mulAccC(_pVk, IC141x, IC141y, calldataload(add(pubSignals, 4480)))
                
                g1_mulAccC(_pVk, IC142x, IC142y, calldataload(add(pubSignals, 4512)))
                
                g1_mulAccC(_pVk, IC143x, IC143y, calldataload(add(pubSignals, 4544)))
                
                g1_mulAccC(_pVk, IC144x, IC144y, calldataload(add(pubSignals, 4576)))
                
                g1_mulAccC(_pVk, IC145x, IC145y, calldataload(add(pubSignals, 4608)))
                

                // -A
                mstore(_pPairing, calldataload(pA))
                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))

                // B
                mstore(add(_pPairing, 64), calldataload(pB))
                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))
                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))
                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))

                // alpha1
                mstore(add(_pPairing, 192), alphax)
                mstore(add(_pPairing, 224), alphay)

                // beta2
                mstore(add(_pPairing, 256), betax1)
                mstore(add(_pPairing, 288), betax2)
                mstore(add(_pPairing, 320), betay1)
                mstore(add(_pPairing, 352), betay2)

                // vk_x
                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))
                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))


                // gamma2
                mstore(add(_pPairing, 448), gammax1)
                mstore(add(_pPairing, 480), gammax2)
                mstore(add(_pPairing, 512), gammay1)
                mstore(add(_pPairing, 544), gammay2)

                // C
                mstore(add(_pPairing, 576), calldataload(pC))
                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))

                // delta2
                mstore(add(_pPairing, 640), deltax1)
                mstore(add(_pPairing, 672), deltax2)
                mstore(add(_pPairing, 704), deltay1)
                mstore(add(_pPairing, 736), deltay2)


                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)

                isOk := and(success, mload(_pPairing))
            }

            let pMem := mload(0x40)
            mstore(0x40, add(pMem, pLastMem))

            // Validate that all evaluations ∈ F
            
            checkField(calldataload(add(_pubSignals, 0)))
            
            checkField(calldataload(add(_pubSignals, 32)))
            
            checkField(calldataload(add(_pubSignals, 64)))
            
            checkField(calldataload(add(_pubSignals, 96)))
            
            checkField(calldataload(add(_pubSignals, 128)))
            
            checkField(calldataload(add(_pubSignals, 160)))
            
            checkField(calldataload(add(_pubSignals, 192)))
            
            checkField(calldataload(add(_pubSignals, 224)))
            
            checkField(calldataload(add(_pubSignals, 256)))
            
            checkField(calldataload(add(_pubSignals, 288)))
            
            checkField(calldataload(add(_pubSignals, 320)))
            
            checkField(calldataload(add(_pubSignals, 352)))
            
            checkField(calldataload(add(_pubSignals, 384)))
            
            checkField(calldataload(add(_pubSignals, 416)))
            
            checkField(calldataload(add(_pubSignals, 448)))
            
            checkField(calldataload(add(_pubSignals, 480)))
            
            checkField(calldataload(add(_pubSignals, 512)))
            
            checkField(calldataload(add(_pubSignals, 544)))
            
            checkField(calldataload(add(_pubSignals, 576)))
            
            checkField(calldataload(add(_pubSignals, 608)))
            
            checkField(calldataload(add(_pubSignals, 640)))
            
            checkField(calldataload(add(_pubSignals, 672)))
            
            checkField(calldataload(add(_pubSignals, 704)))
            
            checkField(calldataload(add(_pubSignals, 736)))
            
            checkField(calldataload(add(_pubSignals, 768)))
            
            checkField(calldataload(add(_pubSignals, 800)))
            
            checkField(calldataload(add(_pubSignals, 832)))
            
            checkField(calldataload(add(_pubSignals, 864)))
            
            checkField(calldataload(add(_pubSignals, 896)))
            
            checkField(calldataload(add(_pubSignals, 928)))
            
            checkField(calldataload(add(_pubSignals, 960)))
            
            checkField(calldataload(add(_pubSignals, 992)))
            
            checkField(calldataload(add(_pubSignals, 1024)))
            
            checkField(calldataload(add(_pubSignals, 1056)))
            
            checkField(calldataload(add(_pubSignals, 1088)))
            
            checkField(calldataload(add(_pubSignals, 1120)))
            
            checkField(calldataload(add(_pubSignals, 1152)))
            
            checkField(calldataload(add(_pubSignals, 1184)))
            
            checkField(calldataload(add(_pubSignals, 1216)))
            
            checkField(calldataload(add(_pubSignals, 1248)))
            
            checkField(calldataload(add(_pubSignals, 1280)))
            
            checkField(calldataload(add(_pubSignals, 1312)))
            
            checkField(calldataload(add(_pubSignals, 1344)))
            
            checkField(calldataload(add(_pubSignals, 1376)))
            
            checkField(calldataload(add(_pubSignals, 1408)))
            
            checkField(calldataload(add(_pubSignals, 1440)))
            
            checkField(calldataload(add(_pubSignals, 1472)))
            
            checkField(calldataload(add(_pubSignals, 1504)))
            
            checkField(calldataload(add(_pubSignals, 1536)))
            
            checkField(calldataload(add(_pubSignals, 1568)))
            
            checkField(calldataload(add(_pubSignals, 1600)))
            
            checkField(calldataload(add(_pubSignals, 1632)))
            
            checkField(calldataload(add(_pubSignals, 1664)))
            
            checkField(calldataload(add(_pubSignals, 1696)))
            
            checkField(calldataload(add(_pubSignals, 1728)))
            
            checkField(calldataload(add(_pubSignals, 1760)))
            
            checkField(calldataload(add(_pubSignals, 1792)))
            
            checkField(calldataload(add(_pubSignals, 1824)))
            
            checkField(calldataload(add(_pubSignals, 1856)))
            
            checkField(calldataload(add(_pubSignals, 1888)))
            
            checkField(calldataload(add(_pubSignals, 1920)))
            
            checkField(calldataload(add(_pubSignals, 1952)))
            
            checkField(calldataload(add(_pubSignals, 1984)))
            
            checkField(calldataload(add(_pubSignals, 2016)))
            
            checkField(calldataload(add(_pubSignals, 2048)))
            
            checkField(calldataload(add(_pubSignals, 2080)))
            
            checkField(calldataload(add(_pubSignals, 2112)))
            
            checkField(calldataload(add(_pubSignals, 2144)))
            
            checkField(calldataload(add(_pubSignals, 2176)))
            
            checkField(calldataload(add(_pubSignals, 2208)))
            
            checkField(calldataload(add(_pubSignals, 2240)))
            
            checkField(calldataload(add(_pubSignals, 2272)))
            
            checkField(calldataload(add(_pubSignals, 2304)))
            
            checkField(calldataload(add(_pubSignals, 2336)))
            
            checkField(calldataload(add(_pubSignals, 2368)))
            
            checkField(calldataload(add(_pubSignals, 2400)))
            
            checkField(calldataload(add(_pubSignals, 2432)))
            
            checkField(calldataload(add(_pubSignals, 2464)))
            
            checkField(calldataload(add(_pubSignals, 2496)))
            
            checkField(calldataload(add(_pubSignals, 2528)))
            
            checkField(calldataload(add(_pubSignals, 2560)))
            
            checkField(calldataload(add(_pubSignals, 2592)))
            
            checkField(calldataload(add(_pubSignals, 2624)))
            
            checkField(calldataload(add(_pubSignals, 2656)))
            
            checkField(calldataload(add(_pubSignals, 2688)))
            
            checkField(calldataload(add(_pubSignals, 2720)))
            
            checkField(calldataload(add(_pubSignals, 2752)))
            
            checkField(calldataload(add(_pubSignals, 2784)))
            
            checkField(calldataload(add(_pubSignals, 2816)))
            
            checkField(calldataload(add(_pubSignals, 2848)))
            
            checkField(calldataload(add(_pubSignals, 2880)))
            
            checkField(calldataload(add(_pubSignals, 2912)))
            
            checkField(calldataload(add(_pubSignals, 2944)))
            
            checkField(calldataload(add(_pubSignals, 2976)))
            
            checkField(calldataload(add(_pubSignals, 3008)))
            
            checkField(calldataload(add(_pubSignals, 3040)))
            
            checkField(calldataload(add(_pubSignals, 3072)))
            
            checkField(calldataload(add(_pubSignals, 3104)))
            
            checkField(calldataload(add(_pubSignals, 3136)))
            
            checkField(calldataload(add(_pubSignals, 3168)))
            
            checkField(calldataload(add(_pubSignals, 3200)))
            
            checkField(calldataload(add(_pubSignals, 3232)))
            
            checkField(calldataload(add(_pubSignals, 3264)))
            
            checkField(calldataload(add(_pubSignals, 3296)))
            
            checkField(calldataload(add(_pubSignals, 3328)))
            
            checkField(calldataload(add(_pubSignals, 3360)))
            
            checkField(calldataload(add(_pubSignals, 3392)))
            
            checkField(calldataload(add(_pubSignals, 3424)))
            
            checkField(calldataload(add(_pubSignals, 3456)))
            
            checkField(calldataload(add(_pubSignals, 3488)))
            
            checkField(calldataload(add(_pubSignals, 3520)))
            
            checkField(calldataload(add(_pubSignals, 3552)))
            
            checkField(calldataload(add(_pubSignals, 3584)))
            
            checkField(calldataload(add(_pubSignals, 3616)))
            
            checkField(calldataload(add(_pubSignals, 3648)))
            
            checkField(calldataload(add(_pubSignals, 3680)))
            
            checkField(calldataload(add(_pubSignals, 3712)))
            
            checkField(calldataload(add(_pubSignals, 3744)))
            
            checkField(calldataload(add(_pubSignals, 3776)))
            
            checkField(calldataload(add(_pubSignals, 3808)))
            
            checkField(calldataload(add(_pubSignals, 3840)))
            
            checkField(calldataload(add(_pubSignals, 3872)))
            
            checkField(calldataload(add(_pubSignals, 3904)))
            
            checkField(calldataload(add(_pubSignals, 3936)))
            
            checkField(calldataload(add(_pubSignals, 3968)))
            
            checkField(calldataload(add(_pubSignals, 4000)))
            
            checkField(calldataload(add(_pubSignals, 4032)))
            
            checkField(calldataload(add(_pubSignals, 4064)))
            
            checkField(calldataload(add(_pubSignals, 4096)))
            
            checkField(calldataload(add(_pubSignals, 4128)))
            
            checkField(calldataload(add(_pubSignals, 4160)))
            
            checkField(calldataload(add(_pubSignals, 4192)))
            
            checkField(calldataload(add(_pubSignals, 4224)))
            
            checkField(calldataload(add(_pubSignals, 4256)))
            
            checkField(calldataload(add(_pubSignals, 4288)))
            
            checkField(calldataload(add(_pubSignals, 4320)))
            
            checkField(calldataload(add(_pubSignals, 4352)))
            
            checkField(calldataload(add(_pubSignals, 4384)))
            
            checkField(calldataload(add(_pubSignals, 4416)))
            
            checkField(calldataload(add(_pubSignals, 4448)))
            
            checkField(calldataload(add(_pubSignals, 4480)))
            
            checkField(calldataload(add(_pubSignals, 4512)))
            
            checkField(calldataload(add(_pubSignals, 4544)))
            
            checkField(calldataload(add(_pubSignals, 4576)))
            
            checkField(calldataload(add(_pubSignals, 4608)))
            
            checkField(calldataload(add(_pubSignals, 4640)))
            

            // Validate all evaluations
            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)

            mstore(0, isValid)
             return(0, 0x20)
         }
     }
 }
